# Original, Andy Beak, https://gist.github.com/andybeak/b5373b389fe8e635d0f4
# Contact ${AS_ADMINEMAIL}
# Hostname: ${AS_HOSTNAME}
# Variables used here: ${AS_ADMINEMAIL} ${AS_FQDN} ${AS_HOST} ${AS_HOSTNAME} ${AS_PORT} ${AS_PROXY} ${AS_PROXY_PORT}

# Read  
#       http://wiki.nginx.org/Pitfalls
#       http://wiki.nginx.org/QuickStart#       
#       http://tautt.com/best-nginx-configuration-for-security/
#       https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
#
#       Generate your key with: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
#       Generate certificate: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt

server {
 
    listen 80;
    listen [::]:80;

    server_name www.${AS_FQDN} ${AS_FQDN};

    root /var/www/public;
    index index.php;
  
    # Do not log favicon.ico requests
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
 
    # Do not log robots.txt requests
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
 
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        proxy_buffering   on;
        proxy_cache_valid 200 120m;
        log_not_found off;
    }
     
    # Redirect 403 errors to 404 error to fool attackers
    error_page 403 = 404;
 
    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
        deny all;
    }
 
    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    location / {
        return 301 https://${AS_FQDN}$request_uri;
    }

} 


# =================================================================================================

  # # # Includes to edit, and use:
  # #
  # include proxy_params;
  # include uwsgi_params;
  # include secure_params;
  # include proxy_params_socketio;

# =================================================================================================

server {

    listen 443 ssl;
    listen [::]:443;

    server_name www.${AS_FQDN} ${AS_FQDN};

    root /var/www/public;
    index index.php;
    
    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # SSL Certificate files
    include secure_params;


    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~ /\. {
        deny all;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|txt)$ {
        expires max;
        proxy_buffering           on;
        proxy_cache_valid 200 120m;
        log_not_found off;
    }

    # Do not log favicon.ico requests
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Do not log robots.txt requests
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Try to serve files with Nginx if possible
    # location / {
    #     try_files $uri @proxy;
    # }

    # Pass on php to Apache
    # location ~* \.php$ {
    #     fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #     proxy_pass ${AS_PROXY}:${AS_PROXY_PORT};
    #     include /etc/nginx/proxy_params;
    # }

    location / {
      include proxy_params;
     	proxy_pass ${AS_PROXY}:${AS_PROXY_PORT};
    }

    # Redirect 403 errors to 404 error to fool attackers
    error_page 403 = 404;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

}
